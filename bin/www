#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');
var io = require('socket.io');
var cp = require('child_process');
var Q  = require('q');


var socketController = require('../sockets/socketController');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
socketController(io);

var getTmateSshPathCmd = "tmate -S /tmp/tmate.sock display -p \'#{tmate_ssh}\'";
var startTmateCmd = "tmate -S /tmp/tmate.sock new-session -d && tmate -S /tmp/tmate.sock wait tmate-ready";
var stopTmateCmd = "tmate -S /tmp/tmate.sock kill-session";
var runCmd = Q.nfbind(cp.exec);

// start tmate
function startTmate() {

  return runCmd(getTmateSshPathCmd) // try to get existing tmate ssh path
      .catch(function () {  // if fail, start tmate
        return runCmd(startTmateCmd);
      })
      .then(function () { // try to get the tmate ssh path again
        return runCmd(getTmateSshPathCmd);
      })
      .then(function(std){ // [ 'ssh LZwcQRQRsIhhfg3RR31qSeKU6@ny2.tmate.io\n', '' ]
        return std[0];     // return the first element
      })
}

// stop tmate
function stopTmate(){
  return runCmd(stopTmateCmd)
      .then(function(){
        return 'debug mode stopped successfully';
      })
      .catch(function(err){
        return 'debug mode is already stopped';
      })
}


io.on('connection', function (socket) {
  socket.on('debug-start',function(data,cb){
    startTmate().then(cb);
  });
  socket.on('debug-stop',function(data,cb){
    stopTmate().then(cb);
  });
  console.log('socket connection');
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
